#include <iostream>
#include <limits.h>

using namespace std;

const char PLAYER = 'O';  // Human player
const char AI = 'X';      // AI player

// Function to print the Tic-Tac-Toe board
void printBoard(char board[3][3]) {
    for (int row = 0; row < 3; row++) {
        for (int col = 0; col < 3; col++) {
            cout << board[row][col];
            if (col < 2) cout << " | ";
        }
        cout << endl;
        if (row < 2) cout << "--|---|--" << endl;
    }
}

// Check if there are moves left on the board
bool isMovesLeft(char board[3][3]) {
    for (int row = 0; row < 3; row++) {
        for (int col = 0; col < 3; col++) {
            if (board[row][col] == '_') return true;
        }
    }
    return false;
}

// Evaluate the current board state
int evaluate(char board[3][3]) {
    // Checking rows for a win
    for (int row = 0; row < 3; row++) {
        if (board[row][0] == board[row][1] && board[row][1] == board[row][2]) {
            if (board[row][0] == AI) return +10;
            else if (board[row][0] == PLAYER) return -10;
        }
    }
    // Checking columns for a win
    for (int col = 0; col < 3; col++) {
        if (board[0][col] == board[1][col] && board[1][col] == board[2][col]) {
            if (board[0][col] == AI) return +10;
            else if (board[0][col] == PLAYER) return -10;
        }
    }
    // Checking diagonals for a win
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
        if (board[0][0] == AI) return +10;
        else if (board[0][0] == PLAYER) return -10;
    }
    if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
        if (board[0][2] == AI) return +10;
        else if (board[0][2] == PLAYER) return -10;
    }
    return 0;  // No winner
}

// Minimax function to determine the best move for the AI
int minimax(char board[3][3], int depth, bool isMaximizing) {
    int score = evaluate(board);

    // If the AI wins
    if (score == 10) return score - depth;

    // If the player wins
    if (score == -10) return score + depth;

    // If no moves left (draw)
    if (!isMovesLeft(board)) return 0;

    if (isMaximizing) {
        int best = INT_MIN;
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                if (board[row][col] == '_') {
                    board[row][col] = AI;
                    best = max(best, minimax(board, depth + 1, false));
                    board[row][col] = '_';
                }
            }
        }
        return best;
    } else {
        int best = INT_MAX;
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                if (board[row][col] == '_') {
                    board[row][col] = PLAYER;
                    best = min(best, minimax(board, depth + 1, true));
                    board[row][col] = '_';
                }
            }
        }
        return best;
    }
}

// Find the best move for the AI
pair<int, int> findBestMove(char board[3][3]) {
    int bestVal = INT_MIN;
    pair<int, int> bestMove = {-1, -1};

    for (int row = 0; row < 3; row++) {
        for (int col = 0; col < 3; col++) {
            if (board[row][col] == '_') {
                board[row][col] = AI;
                int moveVal = minimax(board, 0, false);
                board[row][col] = '_';

                if (moveVal > bestVal) {
                    bestMove = {row, col};
                    bestVal = moveVal;
                }
            }
        }
    }
    return bestMove;
}

int main() {
    char board[3][3] = {
        { '_', '_', '_' },
        { '_', '_', '_' },
        { '_', '_', '_' }
    };

    cout << "Tic-Tac-Toe Game: Player (O) vs AI (X)" << endl;

    while (true) {
        int row, col;
        printBoard(board);

        // Human move
        cout << "Enter your move (row and column): ";
        cin >> row >> col;
        if (board[row][col] != '_') {
            cout << "Invalid move. Try again!" << endl;
            continue;
        }
        board[row][col] = PLAYER;

        // Check if player wins or draw
        if (evaluate(board) == -10) {
            printBoard(board);
            cout << "You win!" << endl;
            break;
        }
        if (!isMovesLeft(board)) {
            printBoard(board);
            cout << "It's a draw!" << endl;
            break;
        }

        // AI move
        cout << "AI is making a move..." << endl;
        pair<int, int> bestMove = findBestMove(board);
        board[bestMove.first][bestMove.second] = AI;

        // Check if AI wins or draw
        if (evaluate(board) == 10) {
            printBoard(board);
            cout << "AI wins!" << endl;
            break;
        }
        if (!isMovesLeft(board)) {
            printBoard(board);
            cout << "It's a draw!" << endl;
            break;
        }
    }

    return 0;
}
